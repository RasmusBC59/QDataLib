{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# QDataLib\n",
    "\n",
    "QDataLib is a library of wrappers around some of the most useful ”data”-functions in QCoDeS.\n",
    "The Idea of QDataLib is to keep track of your data files using a MongoDB database,\n",
    "and ease the export to other file formats than SQLite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import pymongo\n",
    "import tempfile\n",
    "import os\n",
    "import time\n",
    "from qdatalib.tolib import Qdatalib\n",
    "from qcodes.tests.instrument_mocks import DummyInstrument, DummyInstrumentWithMeasurement\n",
    "from qcodes import load_or_create_experiment, initialise_or_create_database_at\n",
    "from qcodes.utils.dataset.doNd import do1d, do2d\n",
    "from qcodes.dataset.plotting import plot_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[WinError 183] Cannot create a file when that file already exists: 'C:\\\\Users\\\\rbcma\\\\AppData\\\\Local\\\\Temp\\\\qdatalib'\n",
      "[WinError 183] Cannot create a file when that file already exists: 'C:\\\\Users\\\\rbcma\\\\AppData\\\\Local\\\\Temp\\\\qdatalib\\\\targetone'\n"
     ]
    }
   ],
   "source": [
    "# Can be ignored, Setting up temporary files and folder to be used in the example\n",
    "TEMP_PATH = tempfile.gettempdir()\n",
    "my_path = os.path.join(TEMP_PATH,'qdatalib')\n",
    "try:\n",
    "    os.mkdir(my_path)\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "targetone = os.path.join(my_path,'targetone')\n",
    "targettwo = os.path.join(my_path,'targettwo')\n",
    "target_db_path = os.path.join(targetone, 'target.db')\n",
    "\n",
    "try:\n",
    "    os.mkdir(targetone)\n",
    "    os.mkdir(targettwo)\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "    \n",
    "db_file_path = os.path.join(my_path, 'qdatalib_tutorial.db')\n",
    "db_file_pathtwo = os.path.join(my_path, 'qdatalib_tutorial2.db')\n",
    "try:\n",
    "    os.remove(db_file_path)\n",
    "    os.remove(db_file_pathtwo)\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## To use QDataLib we first need a conextion to a MongoDB database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "client = pymongo.MongoClient(\"mongodb+srv://rbch:test4RBCH@test.2smqf.mongodb.net/testdb?retryWrites=true&w=majority\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    client.drop_database(\"testdb\")\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "db = client['testdb']\n",
    "collection = db[\"testcol\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Upgrading database; v0 -> v1: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v1 -> v2: 100%|██████████| 1/1 [00:00<00:00, 334.13it/s]\n",
      "Upgrading database; v2 -> v3: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v3 -> v4: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v4 -> v5: 100%|██████████| 1/1 [00:00<00:00, 501.11it/s]\n",
      "Upgrading database; v5 -> v6: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v6 -> v7: 100%|██████████| 1/1 [00:00<00:00, 116.14it/s]\n",
      "Upgrading database; v7 -> v8: 100%|██████████| 1/1 [00:00<00:00, 334.31it/s]\n",
      "Upgrading database; v8 -> v9: 100%|██████████| 1/1 [00:00<00:00, 1003.42it/s]\n"
     ]
    }
   ],
   "source": [
    "#Setting up a Dummy experiment\n",
    "db_file_path = os.path.join(my_path, 'qdatalib_tutorial.db')\n",
    "initialise_or_create_database_at(db_file_path)\n",
    "exp = load_or_create_experiment(experiment_name='qdatalib',\n",
    "                          sample_name=\"no sample\")\n",
    "dac = DummyInstrument('dac', gates=['ch1', 'ch2'])\n",
    "dmm = DummyInstrumentWithMeasurement('dmm', setter_instr=dac)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Then we need a and instace of the class Qdatalib\n",
    "\n",
    "### Passing\n",
    "- collection: The collection used to keep track of your data files\n",
    "- db_source: The SQLite database to export from\n",
    "- db_target: The SQLite database to export to\n",
    "- target_dir: The Directory where other dataformats should be stored \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "qdatalib = Qdatalib(collection,\n",
    "                    db_file_path,\n",
    "                    target_db_path,\n",
    "                    targetone)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "#### To illustrate we run a dummy experiment four times using one set of SQLite databases\n",
    "Passing\n",
    "- run_id = data[0].run_id\n",
    "- scientist = 'John doe'\n",
    "- tag = 'double dot',\n",
    "- note = 'This happened',\n",
    "- dict_exstra = {'my_field': 'Group A', 'my_Score': 10000}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 1. \n",
      "Starting experimental run with id: 2. \n",
      "Starting experimental run with id: 3. \n",
      "Starting experimental run with id: 4. \n"
     ]
    }
   ],
   "source": [
    "v_interval = range(1,5)\n",
    "for v_end in range(1,5):\n",
    "    data = do1d(dac.ch1, 0, v_end, 10, 0.01, dmm.v1, dmm.v2, do_plot=False)\n",
    "    run_id = data[0].run_id\n",
    "    scientist = 'John doe'\n",
    "    tag = 'double dot',\n",
    "    note = 'This happened',\n",
    "    dict_exstra = {'my_field': 'Group A', 'my_Score': 10000}\n",
    "    qdatalib.extract_run_into_db_and_catalog_by_id(run_id=run_id,\n",
    "                                                   scientist=scientist,\n",
    "                                                   tag=tag,\n",
    "                                                   note=note,\n",
    "                                                   dict_exstra = dict_exstra)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Then we run another dummy experiment four times using another set of SQLite databases\n",
    "Here we also export to netcdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Upgrading database; v0 -> v1: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v1 -> v2: 100%|██████████| 1/1 [00:00<00:00, 501.53it/s]\n",
      "Upgrading database; v2 -> v3: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v3 -> v4: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v4 -> v5: 100%|██████████| 1/1 [00:00<00:00, 334.18it/s]\n",
      "Upgrading database; v5 -> v6: : 0it [00:00, ?it/s]\n",
      "Upgrading database; v6 -> v7: 100%|██████████| 1/1 [00:00<00:00, 194.37it/s]\n",
      "Upgrading database; v7 -> v8: 100%|██████████| 1/1 [00:00<00:00, 501.05it/s]\n",
      "Upgrading database; v8 -> v9: 100%|██████████| 1/1 [00:00<00:00, 501.17it/s]\n",
      "Starting experimental run with id: 1. \n",
      "Starting experimental run with id: 2. \n",
      "Starting experimental run with id: 3. \n",
      "Starting experimental run with id: 4. \n"
     ]
    }
   ],
   "source": [
    "db_file_path = os.path.join(my_path, 'qdatalib_tutorial2.db')\n",
    "initialise_or_create_database_at(db_file_path)\n",
    "qdatalib.db_source  = db_file_path\n",
    "qdatalib.db_target = os.path.join(targettwo, 'targettwo.db')\n",
    "qdatalib.target_dir = targettwo\n",
    "exp = load_or_create_experiment(experiment_name='qdatalibtwo', sample_name=\"no sample\")\n",
    "v_interval = range(5,10)\n",
    "for v_end in range(1,5):\n",
    "    data = do2d(dac.ch1, 0, v_end, 10, 0.01,dac.ch2, 0, v_end, 10, 0.01, dmm.v1, dmm.v2, do_plot=False)\n",
    "    run_id = data[0].run_id\n",
    "    scientist = 'Jane doe'\n",
    "    tag = 'triple dot',\n",
    "    note = 'and then this happened',\n",
    "    dict_exstra = {'my_field': 'Group C', 'my_Score': 5700}\n",
    "    qdatalib.extract_run_into_db_and_catalog_by_id(run_id=run_id,scientist=scientist,\n",
    "                                                   tag=tag, note=note,\n",
    "                                                   dict_exstra = dict_exstra)\n",
    "    \n",
    "    qdatalib.extract_run_into_nc_and_catalog(run_id=run_id,scientist=scientist,\n",
    "                                                   tag=tag, note=note,\n",
    "                                                   dict_exstra = dict_exstra)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### We can now try to get the data by use of the run_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The query returend 2 results\n",
      "[   {   '_id': 'aaaaaaaa-0000-0000-0000-0179fb2e343f',\n",
      "        'exp_id': 1,\n",
      "        'exp_name': 'qdatalib',\n",
      "        'file': 'qdatalib_tutorial.db',\n",
      "        'my_Score': 10000,\n",
      "        'my_field': 'Group A',\n",
      "        'note': ['This happened'],\n",
      "        'parameters': [['dac_ch1', 'V'], ['dmm_v1', 'V'], ['dmm_v2', 'V']],\n",
      "        'run_id': 2,\n",
      "        'run_time': '2021-06-11 15:06:19',\n",
      "        'sample_name': 'no sample',\n",
      "        'scientist': 'John doe',\n",
      "        'tag': ['double dot']},\n",
      "    {   '_id': 'aaaaaaaa-0000-0000-0000-0179fb2e4592',\n",
      "        'exp_id': 1,\n",
      "        'exp_name': 'qdatalibtwo',\n",
      "        'file': 'qdatalib_tutorial2.db',\n",
      "        'my_Score': 5700,\n",
      "        'my_field': 'Group C',\n",
      "        'note': ['and then this happened'],\n",
      "        'parameters': [   ['dac_ch1', 'V'],\n",
      "                          ['dac_ch2', 'V'],\n",
      "                          ['dmm_v1', 'V'],\n",
      "                          ['dmm_v2', 'V']],\n",
      "        'run_id': 2,\n",
      "        'run_time': '2021-06-11 15:06:24',\n",
      "        'sample_name': 'no sample',\n",
      "        'scientist': 'Jane doe',\n",
      "        'tag': ['triple dot']}]\n"
     ]
    }
   ],
   "source": [
    "data = qdatalib.get_data_by_catalog({'run_id':2})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "But, since the run_id is degenerate QdataLib will not give you the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### However, We can get the data by giving more information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "data = qdatalib.get_data_by_catalog({'run_id':2,'exp_name': 'qdatalibtwo'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<AxesSubplot:title={'center':'Run #2, Experiment qdatalibtwo (no sample)'}, xlabel='Gate ch1 (V)', ylabel='Gate ch2 (V)'>,\n",
       "  <AxesSubplot:title={'center':'Run #2, Experiment qdatalibtwo (no sample)'}, xlabel='Gate ch1 (V)', ylabel='Gate ch2 (V)'>],\n",
       " [<matplotlib.colorbar.Colorbar at 0x1fdcfa9bac8>,\n",
       "  <matplotlib.colorbar.Colorbar at 0x1fdcfafd288>])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_dataset(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "data = qdatalib.get_data_by_catalog({'run_id':3,'my_field': 'Group C',})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<AxesSubplot:title={'center':'Run #3, Experiment qdatalibtwo (no sample)'}, xlabel='Gate ch1 (V)', ylabel='Gate ch2 (V)'>,\n",
       "  <AxesSubplot:title={'center':'Run #3, Experiment qdatalibtwo (no sample)'}, xlabel='Gate ch1 (V)', ylabel='Gate ch2 (V)'>],\n",
       " [<matplotlib.colorbar.Colorbar at 0x1fdd00979c8>,\n",
       "  <matplotlib.colorbar.Colorbar at 0x1fdcc3c1fc8>])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_dataset(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### We can also retrive the data from netcdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "data_xarray = qdatalib.get_data_from_nc_by_catalog({'run_id':2,'my_field': 'Group C',})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:  (dac_ch1: 10, dac_ch2: 10)\n",
       "Coordinates:\n",
       "  * dac_ch1  (dac_ch1) float64 0.0 0.2222 0.4444 0.6667 ... 1.556 1.778 2.0\n",
       "  * dac_ch2  (dac_ch2) float64 0.0 0.2222 0.4444 0.6667 ... 1.556 1.778 2.0\n",
       "Data variables:\n",
       "    dmm_v1   (dac_ch1, dac_ch2) float64 4.935 5.065 4.915 ... 3.306 3.246 3.334\n",
       "    dmm_v2   (dac_ch1, dac_ch2) float64 0.7588 1.041 ... 0.0001635 0.0004706\n",
       "Attributes: (12/13)\n",
       "    ds_name:                  results\n",
       "    sample_name:              no sample\n",
       "    exp_name:                 qdatalibtwo\n",
       "    snapshot:                 null\n",
       "    guid:                     aaaaaaaa-0000-0000-0000-0179fb2e4592\n",
       "    run_timestamp:            2021-06-11 15:06:24\n",
       "    ...                       ...\n",
       "    captured_run_id:          2\n",
       "    captured_counter:         2\n",
       "    run_id:                   2\n",
       "    run_description:          {&quot;version&quot;: 3, &quot;interdependencies&quot;: {&quot;paramspec...\n",
       "    run_timestamp_raw:        1623416784.2889688\n",
       "    completed_timestamp_raw:  1623416786.0446908</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-c2a95f7e-c99d-4086-b7fe-48477565ff3d' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-c2a95f7e-c99d-4086-b7fe-48477565ff3d' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>dac_ch1</span>: 10</li><li><span class='xr-has-index'>dac_ch2</span>: 10</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-625e5eb8-ebb5-4ecf-83cf-bfeef2499327' class='xr-section-summary-in' type='checkbox'  checked><label for='section-625e5eb8-ebb5-4ecf-83cf-bfeef2499327' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>dac_ch1</span></div><div class='xr-var-dims'>(dac_ch1)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.2222 0.4444 ... 1.778 2.0</div><input id='attrs-35f14173-60c5-442e-be08-c4e52a7b3ad3' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-35f14173-60c5-442e-be08-c4e52a7b3ad3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8b4f4fd8-d390-4758-b164-b9765693ff6c' class='xr-var-data-in' type='checkbox'><label for='data-8b4f4fd8-d390-4758-b164-b9765693ff6c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>name :</span></dt><dd>dac_ch1</dd><dt><span>paramtype :</span></dt><dd>numeric</dd><dt><span>label :</span></dt><dd>Gate ch1</dd><dt><span>unit :</span></dt><dd>V</dd><dt><span>inferred_from :</span></dt><dd>[]</dd><dt><span>depends_on :</span></dt><dd>[]</dd></dl></div><div class='xr-var-data'><pre>array([0.      , 0.222222, 0.444444, 0.666667, 0.888889, 1.111111, 1.333333,\n",
       "       1.555556, 1.777778, 2.      ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>dac_ch2</span></div><div class='xr-var-dims'>(dac_ch2)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.2222 0.4444 ... 1.778 2.0</div><input id='attrs-2602abbd-ebf9-4868-89a8-62e094539722' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2602abbd-ebf9-4868-89a8-62e094539722' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-97098545-44f4-45a1-b8d9-8887bddfc7c4' class='xr-var-data-in' type='checkbox'><label for='data-97098545-44f4-45a1-b8d9-8887bddfc7c4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>name :</span></dt><dd>dac_ch2</dd><dt><span>paramtype :</span></dt><dd>numeric</dd><dt><span>label :</span></dt><dd>Gate ch2</dd><dt><span>unit :</span></dt><dd>V</dd><dt><span>inferred_from :</span></dt><dd>[]</dd><dt><span>depends_on :</span></dt><dd>[]</dd></dl></div><div class='xr-var-data'><pre>array([0.      , 0.222222, 0.444444, 0.666667, 0.888889, 1.111111, 1.333333,\n",
       "       1.555556, 1.777778, 2.      ])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1adadb8d-6943-42c7-ab04-09f128e244a1' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1adadb8d-6943-42c7-ab04-09f128e244a1' class='xr-section-summary' >Data variables: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>dmm_v1</span></div><div class='xr-var-dims'>(dac_ch1, dac_ch2)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-6c8ce68e-8ce4-4454-9b99-da5546981d85' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-6c8ce68e-8ce4-4454-9b99-da5546981d85' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ce3ea9e3-386a-4298-84a8-ca4931f09c05' class='xr-var-data-in' type='checkbox'><label for='data-ce3ea9e3-386a-4298-84a8-ca4931f09c05' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>name :</span></dt><dd>dmm_v1</dd><dt><span>paramtype :</span></dt><dd>numeric</dd><dt><span>label :</span></dt><dd>Gate v1</dd><dt><span>unit :</span></dt><dd>V</dd><dt><span>inferred_from :</span></dt><dd>[]</dd><dt><span>depends_on :</span></dt><dd>[&#x27;dac_ch1&#x27;, &#x27;dac_ch2&#x27;]</dd></dl></div><div class='xr-var-data'><pre>array([[4.935387, 5.065227, 4.914669, 4.990788, 4.865157, 4.966816, 5.227467,\n",
       "        4.889559, 5.110858, 4.944111],\n",
       "       [4.78458 , 4.78403 , 4.746767, 4.755715, 4.730356, 4.85482 , 4.683202,\n",
       "        4.854109, 4.697764, 4.816132],\n",
       "       [4.430877, 4.734604, 4.532898, 4.686976, 4.587145, 4.554387, 4.700193,\n",
       "        4.474907, 4.584378, 4.473469],\n",
       "       [4.376615, 4.267978, 4.294907, 4.362393, 4.53336 , 4.327976, 4.239027,\n",
       "        4.414906, 4.367057, 4.342754],\n",
       "       [4.132847, 4.215517, 4.253646, 4.135161, 4.030771, 4.292886, 4.299102,\n",
       "        4.243798, 4.177035, 4.306037],\n",
       "       [3.922778, 3.842728, 4.058825, 3.93001 , 3.954837, 4.081183, 4.076352,\n",
       "        3.924036, 3.889493, 4.104677],\n",
       "       [3.908694, 3.87205 , 3.686022, 3.864752, 3.763759, 3.610785, 3.825237,\n",
       "        3.891283, 3.919503, 3.776867],\n",
       "       [3.661515, 3.519768, 3.778137, 3.71544 , 3.717689, 3.706922, 3.547311,\n",
       "        3.65476 , 3.494341, 3.648809],\n",
       "       [3.524321, 3.533192, 3.545946, 3.649903, 3.407999, 3.453336, 3.531341,\n",
       "        3.391838, 3.506015, 3.469099],\n",
       "       [3.341075, 3.348312, 3.541843, 3.433352, 3.491396, 3.353082, 3.32631 ,\n",
       "        3.305877, 3.245856, 3.334196]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>dmm_v2</span></div><div class='xr-var-dims'>(dac_ch1, dac_ch2)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-8136fab1-e7b9-40d9-b62d-c7379fdc0d0e' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8136fab1-e7b9-40d9-b62d-c7379fdc0d0e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6c59b724-9365-41b4-83c5-6b67dc382937' class='xr-var-data-in' type='checkbox'><label for='data-6c59b724-9365-41b4-83c5-6b67dc382937' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>name :</span></dt><dd>dmm_v2</dd><dt><span>paramtype :</span></dt><dd>numeric</dd><dt><span>label :</span></dt><dd>Gate v2</dd><dt><span>unit :</span></dt><dd>V</dd><dt><span>inferred_from :</span></dt><dd>[]</dd><dt><span>depends_on :</span></dt><dd>[&#x27;dac_ch1&#x27;, &#x27;dac_ch2&#x27;]</dd></dl></div><div class='xr-var-data'><pre>array([[ 7.588364e-01,  1.041325e+00,  6.489380e-01,  1.834889e-01,\n",
       "         2.311571e-02,  1.446626e-03,  3.457965e-04, -4.031864e-06,\n",
       "         7.670313e-04, -5.993203e-04],\n",
       "       [ 7.302318e-01,  1.000989e+00,  6.236057e-01,  1.769330e-01,\n",
       "         2.232199e-02,  7.168901e-04, -1.590456e-05,  1.063748e-03,\n",
       "         2.255469e-04,  2.977178e-04],\n",
       "       [ 3.177031e-01,  4.368836e-01,  2.722947e-01,  7.601252e-02,\n",
       "         1.038429e-02,  8.571196e-04, -2.186409e-04,  5.821293e-04,\n",
       "        -7.345768e-04, -1.302815e-04],\n",
       "       [ 6.375058e-02,  8.596516e-02,  5.436101e-02,  1.591976e-02,\n",
       "         1.755724e-03, -2.987268e-04,  3.328710e-05,  5.658246e-04,\n",
       "         1.558954e-04, -3.948903e-04],\n",
       "       [ 5.620593e-03,  7.845595e-03,  5.301074e-03,  1.543202e-03,\n",
       "         3.166902e-05,  3.557628e-04,  2.895074e-04, -2.696288e-04,\n",
       "         9.026287e-04, -6.939633e-04],\n",
       "       [ 2.232403e-04, -1.400779e-04,  5.310871e-04,  3.508633e-04,\n",
       "         8.169249e-04,  8.848601e-04, -2.219900e-05,  2.220120e-04,\n",
       "        -9.021014e-04, -7.503401e-04],\n",
       "       [ 2.916832e-04,  7.210560e-04, -3.892944e-05, -2.608953e-04,\n",
       "         1.743293e-04,  3.639481e-04,  5.399604e-04, -2.098977e-04,\n",
       "        -1.360520e-04,  4.589407e-04],\n",
       "       [-4.748149e-04, -7.076299e-06,  2.428641e-04, -1.133362e-04,\n",
       "        -4.112834e-05, -9.897963e-05, -9.710929e-04, -4.147986e-04,\n",
       "        -9.854850e-04, -2.804198e-05],\n",
       "       [ 7.350671e-04,  2.782632e-04,  3.212678e-04, -4.680767e-05,\n",
       "         1.383615e-04, -5.370820e-04,  4.955831e-04, -5.126081e-04,\n",
       "        -7.552258e-04, -2.765893e-04],\n",
       "       [-3.409647e-04,  6.112093e-05, -2.415324e-04, -1.409471e-03,\n",
       "         2.362624e-04, -8.999599e-04, -3.356283e-04, -2.052295e-04,\n",
       "         1.635195e-04,  4.706009e-04]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-15c31425-9e51-454a-8a21-579b8a386279' class='xr-section-summary-in' type='checkbox'  ><label for='section-15c31425-9e51-454a-8a21-579b8a386279' class='xr-section-summary' >Attributes: <span>(13)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>ds_name :</span></dt><dd>results</dd><dt><span>sample_name :</span></dt><dd>no sample</dd><dt><span>exp_name :</span></dt><dd>qdatalibtwo</dd><dt><span>snapshot :</span></dt><dd>null</dd><dt><span>guid :</span></dt><dd>aaaaaaaa-0000-0000-0000-0179fb2e4592</dd><dt><span>run_timestamp :</span></dt><dd>2021-06-11 15:06:24</dd><dt><span>completed_timestamp :</span></dt><dd>2021-06-11 15:06:26</dd><dt><span>captured_run_id :</span></dt><dd>2</dd><dt><span>captured_counter :</span></dt><dd>2</dd><dt><span>run_id :</span></dt><dd>2</dd><dt><span>run_description :</span></dt><dd>{&quot;version&quot;: 3, &quot;interdependencies&quot;: {&quot;paramspecs&quot;: [{&quot;name&quot;: &quot;dac_ch1&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate ch1&quot;, &quot;unit&quot;: &quot;V&quot;, &quot;inferred_from&quot;: [], &quot;depends_on&quot;: []}, {&quot;name&quot;: &quot;dac_ch2&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate ch2&quot;, &quot;unit&quot;: &quot;V&quot;, &quot;inferred_from&quot;: [], &quot;depends_on&quot;: []}, {&quot;name&quot;: &quot;dmm_v1&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate v1&quot;, &quot;unit&quot;: &quot;V&quot;, &quot;inferred_from&quot;: [], &quot;depends_on&quot;: [&quot;dac_ch1&quot;, &quot;dac_ch2&quot;]}, {&quot;name&quot;: &quot;dmm_v2&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate v2&quot;, &quot;unit&quot;: &quot;V&quot;, &quot;inferred_from&quot;: [], &quot;depends_on&quot;: [&quot;dac_ch1&quot;, &quot;dac_ch2&quot;]}]}, &quot;interdependencies_&quot;: {&quot;parameters&quot;: {&quot;dmm_v1&quot;: {&quot;name&quot;: &quot;dmm_v1&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate v1&quot;, &quot;unit&quot;: &quot;V&quot;}, &quot;dac_ch1&quot;: {&quot;name&quot;: &quot;dac_ch1&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate ch1&quot;, &quot;unit&quot;: &quot;V&quot;}, &quot;dac_ch2&quot;: {&quot;name&quot;: &quot;dac_ch2&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate ch2&quot;, &quot;unit&quot;: &quot;V&quot;}, &quot;dmm_v2&quot;: {&quot;name&quot;: &quot;dmm_v2&quot;, &quot;paramtype&quot;: &quot;numeric&quot;, &quot;label&quot;: &quot;Gate v2&quot;, &quot;unit&quot;: &quot;V&quot;}}, &quot;dependencies&quot;: {&quot;dmm_v1&quot;: [&quot;dac_ch1&quot;, &quot;dac_ch2&quot;], &quot;dmm_v2&quot;: [&quot;dac_ch1&quot;, &quot;dac_ch2&quot;]}, &quot;inferences&quot;: {}, &quot;standalones&quot;: []}, &quot;shapes&quot;: {&quot;dmm_v1&quot;: [10, 10], &quot;dmm_v2&quot;: [10, 10]}}</dd><dt><span>run_timestamp_raw :</span></dt><dd>1623416784.2889688</dd><dt><span>completed_timestamp_raw :</span></dt><dd>1623416786.0446908</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:  (dac_ch1: 10, dac_ch2: 10)\n",
       "Coordinates:\n",
       "  * dac_ch1  (dac_ch1) float64 0.0 0.2222 0.4444 0.6667 ... 1.556 1.778 2.0\n",
       "  * dac_ch2  (dac_ch2) float64 0.0 0.2222 0.4444 0.6667 ... 1.556 1.778 2.0\n",
       "Data variables:\n",
       "    dmm_v1   (dac_ch1, dac_ch2) float64 ...\n",
       "    dmm_v2   (dac_ch1, dac_ch2) float64 ...\n",
       "Attributes: (12/13)\n",
       "    ds_name:                  results\n",
       "    sample_name:              no sample\n",
       "    exp_name:                 qdatalibtwo\n",
       "    snapshot:                 null\n",
       "    guid:                     aaaaaaaa-0000-0000-0000-0179fb2e4592\n",
       "    run_timestamp:            2021-06-11 15:06:24\n",
       "    ...                       ...\n",
       "    captured_run_id:          2\n",
       "    captured_counter:         2\n",
       "    run_id:                   2\n",
       "    run_description:          {\"version\": 3, \"interdependencies\": {\"paramspec...\n",
       "    run_timestamp_raw:        1623416784.2889688\n",
       "    completed_timestamp_raw:  1623416786.0446908"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_xarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.QuadMesh at 0x1fdd1152208>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_xarray.dmm_v1.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "interpreter": {
   "hash": "f5a384d9dbaee88a11b5476a44025812f23b8cd3315b9d76235eccf9406ff71b"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
